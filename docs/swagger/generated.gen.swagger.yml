openapi: 3.0.0
info:
  version: 1.0.0
  title: hubme api
servers:
  - url: http://localhost:8080
paths:
  /user/{uuid}:
    get:
      summary: ユーザー情報取得
      description: ユーザーの情報をuuidで取得
      operationId: UserFindByID
      parameters:
        - $ref: '#/components/parameters/UserUUIDRequest'
      responses:
        '200':
          description: Successfully get user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Failed to find user data by uuid
    put:
      summary: ユーザー情報を更新
      description: ユーザー情報をuuidで更新
      operationId: UpdateUser
      parameters:
        - $ref: '#/components/parameters/UserUUIDRequest'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithoutPassword'
      responses:
        '200':
          description: Successfully updated user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: successful update user
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Failed to update user data
  /user/signup:
    post:
      summary: ユーザーのサインアップ
      description: ユーザーのサインアップ
      operationId: SignupUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: サインアップ成功
  /user/signin:
    post:
      summary: ユーザーのサインイン
      description: ユーザーのサインイン
      operationId: SigninUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signin'
      responses:
        '200':
          description: Successfully signed in
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    example: ffafafafffafaf
  /community/{uuid}:
    get:
      summary: コミュニティ情報取得
      description: コミュニティ情報をuuidで取得
      operationId: CommunityFindByID
      parameters:
        - $ref: '#/components/parameters/CommunityUUIDRequest'
      responses:
        '200':
          description: Successfully get community data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '400':
          description: Failed to find community data
    put:
      summary: コミュニティ情報を更新
      description: コミュニティ情報をuuidで更新
      operationId: UpdateCommunity
      parameters:
        - $ref: '#/components/parameters/CommunityUUIDRequest'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityWithoutPassword'
      responses:
        '200':
          description: Successfully updated community data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '400':
          description: Failed to update community data
components:
  parameters:
    UserUUIDRequest:
      name: uuid
      in: path
      required: true
      schema:
        type: string
    CommunityUUIDRequest:
      name: uuid
      in: path
      required: true
      schema:
        type: string
  schemas:
    User:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        img:
          type: string
        self:
          type: string
        mem1:
          type: string
        mem2:
          type: string
        mem3:
          type: string
      required:
        - uuid
        - name
        - email
        - password
    UserWithoutPassword:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        img:
          type: string
        self:
          type: string
        mem1:
          type: string
        mem2:
          type: string
        mem3:
          type: string
      required:
        - name
        - email
    Signin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Community:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        img:
          type: string
        self:
          type: string
        mem1:
          type: string
        mem2:
          type: string
        mem3:
          type: string
      required:
        - uuid
        - name
        - email
        - password
    CommunityWithoutPassword:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        img:
          type: string
        self:
          type: string
        mem1:
          type: string
        mem2:
          type: string
        mem3:
          type: string
      required:
        - name
        - email
